// This file is generated by kconfig_compiler from konference.kcfg.
// All changes you do to this file will be lost.

#include "settings.h"

#include <kstaticdeleter.h>

KonferenceSettings *KonferenceSettings::mSelf = 0;
static KStaticDeleter<KonferenceSettings> staticKonferenceSettingsDeleter;

KonferenceSettings *KonferenceSettings::self()
{
  if ( !mSelf ) {
    staticKonferenceSettingsDeleter.setObject( mSelf, new KonferenceSettings() );
    mSelf->readConfig();
  }

  return mSelf;
}

KonferenceSettings::KonferenceSettings(  )
  : KConfigSkeleton( QString::fromLatin1( "konferencerc" ) )
{
  mSelf = this;
  setCurrentGroup( QString::fromLatin1( "general" ) );

  mCompletitionListItem = new KConfigSkeleton::ItemStringList( currentGroup(), QString::fromLatin1( "completitionList" ), mCompletitionList );
  addItem( mCompletitionListItem, QString::fromLatin1( "completitionList" ) );
  mHistoryListItem = new KConfigSkeleton::ItemStringList( currentGroup(), QString::fromLatin1( "historyList" ), mHistoryList );
  addItem( mHistoryListItem, QString::fromLatin1( "historyList" ) );

  setCurrentGroup( QString::fromLatin1( "audio" ) );

  QValueList<KConfigSkeleton::ItemEnum::Choice> valuesaudioPlugin;
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QString::fromLatin1( "Arts" );
    valuesaudioPlugin.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QString::fromLatin1( "OSS" );
    valuesaudioPlugin.append( choice );
  }
  mAudioPluginItem = new KConfigSkeleton::ItemEnum( currentGroup(), QString::fromLatin1( "audioPlugin" ), mAudioPlugin, valuesaudioPlugin );
  addItem( mAudioPluginItem, QString::fromLatin1( "audioPlugin" ) );
  mOutputMuteItem = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "outputMute" ), mOutputMute, false );
  addItem( mOutputMuteItem, QString::fromLatin1( "outputMute" ) );
  mInputDeviceItem = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "inputDevice" ), mInputDevice, "/dev/dsp" );
  addItem( mInputDeviceItem, QString::fromLatin1( "inputDevice" ) );
  mOutputDeviceItem = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "outputDevice" ), mOutputDevice, "/dev/dsp" );
  addItem( mOutputDeviceItem, QString::fromLatin1( "outputDevice" ) );
  mInputMuteItem = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "inputMute" ), mInputMute, false );
  addItem( mInputMuteItem, QString::fromLatin1( "inputMute" ) );
  mAudioCodecsItem = new KConfigSkeleton::ItemStringList( currentGroup(), QString::fromLatin1( "audioCodecs" ), mAudioCodecs );
  addItem( mAudioCodecsItem, QString::fromLatin1( "audioCodecs" ) );
  mMinJitterItem = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "minJitter" ), mMinJitter, 20 );
  addItem( mMinJitterItem, QString::fromLatin1( "minJitter" ) );
  mMaxJitterItem = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "maxJitter" ), mMaxJitter, 1000 );
  addItem( mMaxJitterItem, QString::fromLatin1( "maxJitter" ) );
  mSilenceDetectionItem = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "silenceDetection" ), mSilenceDetection, false );
  addItem( mSilenceDetectionItem, QString::fromLatin1( "silenceDetection" ) );

  setCurrentGroup( QString::fromLatin1( "video" ) );

  QValueList<KConfigSkeleton::ItemEnum::Choice> valuesvideoPlugin;
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QString::fromLatin1( "V4L" );
    valuesvideoPlugin.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QString::fromLatin1( "Image" );
    valuesvideoPlugin.append( choice );
  }
  mVideoPluginItem = new KConfigSkeleton::ItemEnum( currentGroup(), QString::fromLatin1( "videoPlugin" ), mVideoPlugin, valuesvideoPlugin );
  addItem( mVideoPluginItem, QString::fromLatin1( "videoPlugin" ) );
  mVideoDeviceItem = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "videoDevice" ), mVideoDevice, "/dev/video0" );
  addItem( mVideoDeviceItem, QString::fromLatin1( "videoDevice" ) );
  mFakeDeviceImageItem = new KConfigSkeleton::ItemPath( currentGroup(), QString::fromLatin1( "fakeDeviceImage" ), mFakeDeviceImage, "$KDEDIR/share/apps/konferencepart/splash.png" );
  addItem( mFakeDeviceImageItem, QString::fromLatin1( "fakeDeviceImage" ) );
  mVideoReceptionItem = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "videoReception" ), mVideoReception, true );
  addItem( mVideoReceptionItem, QString::fromLatin1( "videoReception" ) );
  mVideoTransmissionItem = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "videoTransmission" ), mVideoTransmission, true );
  addItem( mVideoTransmissionItem, QString::fromLatin1( "videoTransmission" ) );
  mUseH263Item = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "useH263" ), mUseH263, false );
  addItem( mUseH263Item, QString::fromLatin1( "useH263" ) );
  mMaxVideoBandwidthItem = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "maxVideoBandwidth" ), mMaxVideoBandwidth, 4 );
  addItem( mMaxVideoBandwidthItem, QString::fromLatin1( "maxVideoBandwidth" ) );
  mMinTransmitFpsItem = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "minTransmitFps" ), mMinTransmitFps, 2 );
  addItem( mMinTransmitFpsItem, QString::fromLatin1( "minTransmitFps" ) );
  mTransmittedBackgroundBlocksItem = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "transmittedBackgroundBlocks" ), mTransmittedBackgroundBlocks, 1 );
  addItem( mTransmittedBackgroundBlocksItem, QString::fromLatin1( "transmittedBackgroundBlocks" ) );
  mTransmitQualityItem = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "transmitQuality" ), mTransmitQuality, 1 );
  addItem( mTransmitQualityItem, QString::fromLatin1( "transmitQuality" ) );
  mReceiveQualityItem = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "receiveQuality" ), mReceiveQuality, 1 );
  addItem( mReceiveQualityItem, QString::fromLatin1( "receiveQuality" ) );
  mColorFormatItem = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "colorFormat" ), mColorFormat, "YUV420P" );
  addItem( mColorFormatItem, QString::fromLatin1( "colorFormat" ) );
  mVideoChannelItem = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "videoChannel" ), mVideoChannel, 0 );
  addItem( mVideoChannelItem, QString::fromLatin1( "videoChannel" ) );
  QValueList<KConfigSkeleton::ItemEnum::Choice> valuesvideoSize;
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QString::fromLatin1( "QCIF" );
    valuesvideoSize.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice choice;
    choice.name = QString::fromLatin1( "CIF" );
    valuesvideoSize.append( choice );
  }
  mVideoSizeItem = new KConfigSkeleton::ItemEnum( currentGroup(), QString::fromLatin1( "videoSize" ), mVideoSize, valuesvideoSize );
  addItem( mVideoSizeItem, QString::fromLatin1( "videoSize" ) );
  mVideoFormatItem = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "videoFormat" ), mVideoFormat );
  addItem( mVideoFormatItem, QString::fromLatin1( "videoFormat" ) );
  mBrightnessItem = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "brightness" ), mBrightness, 1 );
  addItem( mBrightnessItem, QString::fromLatin1( "brightness" ) );
  mColorItem = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "color" ), mColor, 1 );
  addItem( mColorItem, QString::fromLatin1( "color" ) );
  mContrastItem = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "contrast" ), mContrast, 1 );
  addItem( mContrastItem, QString::fromLatin1( "contrast" ) );
  mHueItem = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "hue" ), mHue, 1 );
  addItem( mHueItem, QString::fromLatin1( "hue" ) );

  setCurrentGroup( QString::fromLatin1( "personal" ) );

  mNameItem = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "name" ), mName, "KonferenceUser" );
  addItem( mNameItem, QString::fromLatin1( "name" ) );
  mEmailItem = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "email" ), mEmail );
  addItem( mEmailItem, QString::fromLatin1( "email" ) );
  mLocationItem = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "location" ), mLocation );
  addItem( mLocationItem, QString::fromLatin1( "location" ) );
  mCommentItem = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "comment" ), mComment, "test" );
  addItem( mCommentItem, QString::fromLatin1( "comment" ) );

  setCurrentGroup( QString::fromLatin1( "connection" ) );

  mLocalAudioPortItem = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "localAudioPort" ), mLocalAudioPort, 21232 );
  addItem( mLocalAudioPortItem, QString::fromLatin1( "localAudioPort" ) );
  mLocalVideoPortItem = new KConfigSkeleton::ItemInt( currentGroup(), QString::fromLatin1( "localVideoPort" ), mLocalVideoPort, 21234 );
  addItem( mLocalVideoPortItem, QString::fromLatin1( "localVideoPort" ) );
  mAutoAcceptCallsItem = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "autoAcceptCalls" ), mAutoAcceptCalls, true );
  addItem( mAutoAcceptCallsItem, QString::fromLatin1( "autoAcceptCalls" ) );
  mEnableNATItem = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "enableNAT" ), mEnableNAT, false );
  addItem( mEnableNATItem, QString::fromLatin1( "enableNAT" ) );
  mPublicIPItem = new KConfigSkeleton::ItemString( currentGroup(), QString::fromLatin1( "publicIP" ), mPublicIP, "127.0.0.1" );
  addItem( mPublicIPItem, QString::fromLatin1( "publicIP" ) );

  setCurrentGroup( QString::fromLatin1( "view" ) );

  mMirrorVerticalItem = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "mirrorVertical" ), mMirrorVertical, false );
  addItem( mMirrorVerticalItem, QString::fromLatin1( "mirrorVertical" ) );
  mMirrorHorizontalItem = new KConfigSkeleton::ItemBool( currentGroup(), QString::fromLatin1( "mirrorHorizontal" ), mMirrorHorizontal, false );
  addItem( mMirrorHorizontalItem, QString::fromLatin1( "mirrorHorizontal" ) );
}

KonferenceSettings::~KonferenceSettings()
{
  if ( mSelf == this )
    staticKonferenceSettingsDeleter.setObject( mSelf, 0, false );
}

